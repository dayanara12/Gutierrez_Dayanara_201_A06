{
  "hash": "befa9c42eea4ad002a58667c3635e992",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 6\"\nsubtitle: \"STAT 201\"\nauthor: \"Dayanara Gutierrez\"\n\nformat:\n  html:\n    toc: true\n    embed-resources: true\n\nexecute:\n  message: false\n  warning: false\n---\n\n\n\n# Instructions\n\n1. **Write your name** on the assignment\n\n2. Write your code in the *Code* cells of the **template provided** to write solutions for the assignment. **Do not open a new qmd**, and work from scratch. Ensure that the solution is written neatly enough to understand and grade.\n\n3. You may talk to a friend, discuss the questions and potential directions for solving them. However, you need to write your own solutions and code separately, and not as a group activity. Do not use AI to solve the problems.\n\n4. There are point deductions if your code is not clean and organized.\n\n5. Only print what is asked for. Highly inefficient code will be deducted for because it demonstrates lack of understanding.\n\n6. Render as an HTML and **submit BOTH the .qmd and HTML file**.\n\nThe grader cannot grade what they cannot see! Failure to render your document after completing all questions will lead to deductions.\n\n## Question 1 (5 points)\n\nLink your RStudio to your GitHub account and create a **public** repository where you will commit and push this assignment to. We will be following the instructions in [https://happygitwithr.com/](https://happygitwithr.com/) The chapters listed below are referring to this book.\n\n\nRefer to the **instructions html** for this question! The instructions to setup GitHub are not included in this template to save space.\n\n\nTo get full credit for this Question you must:\n  \n  - have a clickable link to your GitHub in the callout below\n  - have at least 5 **meaningful** commits pushed to GitHub. \n  - have your GitHub up to date (ie: assignment is complete on GitHub).\n  - insert a screenshot of RStudio that shows the project and Git. See instructions html for what needs to be visible in the screenshot.\n\n::: {.callout-tip icon=false}\n\n## Github Repo Link\n\n[https://your-github-repo-url](https://your-github-repo-url)\n\n:::\n\n::: {.callout-tip icon=false}\n\n## Screenshot/image of RStudio\n\n![](filepath.png)\n\n:::\n\n\n## Question 2 (8 points)\n\nConsider the list of lists below containing basketball player information.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_info <- list(MJ = list(name = \"Michael Jordan\",\n                              postion = \"shooting guard\",\n                              games_played = 179,\n                              points = 5987,\n                              assists = 1022),\n                    LJ = list(name = \"LeBron James\",\n                              postion = \"small forward\",\n                              games_played = 287,\n                              points = 8162,\n                              assists = 2067),\n                    KB = list(name = \"Kobe Bryant\",\n                              postion = \"shooting guard\",\n                              games_played = 220,\n                              points = 5640,\n                              assists = 1040),\n                    KA = list(name = \"Kareem Abdul-Jabbar\",\n                              postion = \"center\",\n                              games_played = 237,\n                              points = 5762,\n                              assists = 767),\n                    SO = list(name = \"Shaquille O'Neal\",\n                              postion = \"center\",\n                              games_played = 216,\n                              points = 5250,\n                              assists = 582))\n```\n:::\n\n\n\n\n### Part a (1 point)\n\nExtract the value `8162` (LeBron James points) in 2 different ways:\n\n- using indexing \n- using names\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Part b (3 points)\n\nAdd a new named element to the end of each player's list called `height`. The heights in inches are as follows: MJ = 78; LJ = 81; KB = 78; KA = 86; SO = 85.\n\nPrint the `player_info` list to prove you were successful.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Part c (3 points)\n\nCreate a new list that contains elements corresponding to each player's `points_per_game`. \n\n- `points_per_game = points/games_played`\n\nName each element with the respective player's initials.\n\nie: The first element of the list will be 33.44693 and the name of this element will be MJ.\n\nHint: initialize an empty list\n\nNote: this must still run correctly even if the values were to change or if another player were added to the list or if the player order changed.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Part d (1 point)\n\nUse the list created in Part c and an appropriate apply function to round each value to two decimal places.\n\nStore the output as a vector and print the results.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Question 3 (3 points)\n\nConsider the matrix `mat_rand` of random numbers below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrand_num <- c(sample(10:100, 10), sample(100:999, 10), sample(1000:2000, 10))\n\nmat_rand <- matrix(sample(rand_num, 30), ncol = 5)\n```\n:::\n\n\n\nUse an appropriate apply function to round values with 2 digits to the nearest tens, values with 3 digits to the nearest hundreds, and 4 digits to the nearest thousands.\n\nie: 91 rounds to 90; 173 rounds to 200; 1450 rounds to 1000\n\nHint: use `MARGIN = 1:2` to apply the function to each value instead of only a row/col.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Question 4 (9 points)\n\nRun the below code chunk to load a data frame named `max_temps` into your Environment. May need to install `tidyverse` and `janitor` first in order for this to run. You can install packages by clicking on the **Packages** tab in the bottom right pane followed by clicking **Install**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ntemp_url <- 'https://raw.githubusercontent.com/biodash/biodash.github.io/master/assets/data/temperature/co_oh_va_max_temp.txt'\ntemp_file <- 'state_max_temps.tsv'\ndownload.file(url = temp_url, destfile = temp_file)\n\nmax_temps <- read_tsv(\"state_max_temps.tsv\") |> \n  janitor::clean_names()\n```\n:::\n\n\n\n### Part a (2 points)\n\nCalculate the average temperature for each month across the whole data frame (using the data for all three states together).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Part b (2 points)\n\nCreate three new data frames by slicing the data by state.\n\n- Slice the data frame to only include the state of Colorado (CO).\n- Slice the data frame to only include the state of Ohio (OH).\n- Slice the data frame to only include the state of Virginia (VA).\n\nNo need to print any output here.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Part c (5 points)\n\nCalculate the **median annual** temperature for your Colorado data set. \n\nUse the `which.max()` and `which.min()` function to determine which year had the highest median temperature and which year had the lowest median temperature.\n\nThen print the sentence:\n\n\"The maximum median annual temperature of {} occurred in {} and the minimum median annual temperature of {} occurred in {}.\"\n\nExample (this is NOT the answer just an example of what goes in the {}):\n\n\"The maximum median annual temperature of 68.25 occurred in 2017 and the minimum median annual temperature of 57.15 occurred in 1907.\"\n\nNote: This code should still run successfully even if the numbers were to change.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Question 5 (5 points)\n\nWrite a recursive function that calculates the sum of the digits in a number. \n\nExample: The number 312 would return 6 (3 + 1 + 2)\n\nRun your function with 935068.\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}